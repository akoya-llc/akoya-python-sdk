# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from akoyaapisv240.api_helper import APIHelper


class TransactionsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(TransactionsControllerTests, cls).setUpClass()
        cls.controller = cls.client.transactions
        cls.response_catcher = cls.controller.http_call_back

    # The transactions API allows you to retrieve transaction history of consumer-permissioned accounts.
    #
    #> ðŸ›‘
    #> 
    #> The *id_token* should be used as the bearer token with this call.
    #
    #For more information on how to paginate transaction results, please see: [Pagination](https://docs.akoya.com/v2/docs/pagination)
    #
    #Use the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:
    #
    #`https://sandbox-products.ddp.akoya.com/transactions/v2/mikomo?mode=standard`
    #
    #`mode` is available in both sandbox and production.
    #
    #`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.
    def test_get_transactions(self):
        # Parameters for the API call
        version = 'v2'
        provider_id = 'mikomo'
        account_id = ':accountId'
        start_time = APIHelper.RFC3339DateTime.from_value('2020-03-30T04:00:00Z').datetime
        end_time = APIHelper.RFC3339DateTime.from_value('2021-03-30T04:00:00Z').datetime
        offset = '0'
        limit = 50
        x_akoya_interaction_type = None
        mode = 'raw'

        # Perform the API call through the SDK function
        result = self.controller.get_transactions(version, provider_id, account_id, start_time, end_time, offset, limit, x_akoya_interaction_type, mode)

        _paginated_data = None
        try:
            for _page in result.pages():
                _paginated_data = _page
        except:
            pass

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert _paginated_data is not None
        expected_body = APIHelper.json_deserialize('{"links":{"prev":{"href":"/transactions/v2/mikomo/33fbd9e5-9cc3-3d'
            '7d-15b3-70d97d87ca1d?endTime=2021-02-26T00%3A00%3A00Z&limit=5&offs'
            'et=0&startTime=2019-02-26T00%3A00%3A00Z"}},"transactions":[{"depos'
            'itTransaction":{"accountId":"33fbd9e5-9cc3-3d7d-15b3-70d97d87ca1d"'
            ',"amount":0.29,"debitCreditMemo":"CREDIT","description":"Interest '
            'Paid This Period","postedTimestamp":"2021-01-27T00:00:00Z","status'
            '":"POSTED","transactionId":"22ef95ee-6127-382d-a28c-5b8b7a15d2eb",'
            '"transactionTimestamp":"2021-01-27T00:00:00Z","transactionType":"I'
            'NTEREST"}},{"depositTransaction":{"accountId":"33fbd9e5-9cc3-3d7d-'
            '15b3-70d97d87ca1d","amount":0.13,"debitCreditMemo":"CREDIT","descr'
            'iption":"Interest Paid This Period","postedTimestamp":"2021-02-24T'
            '00:00:00Z","status":"POSTED","transactionId":"f3fced9d-a7a2-4194-5'
            'a17-a2a9b09ff64a","transactionTimestamp":"2021-02-24T00:00:00Z","t'
            'ransactionType":"INTEREST"}}]}')
        received_body = APIHelper.json_deserialize(APIHelper.json_serialize(_paginated_data.body))
        assert ComparisonHelper.match_body(expected_body, received_body)

