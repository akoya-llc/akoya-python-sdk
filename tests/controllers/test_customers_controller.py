# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from akoyaapisv240.api_helper import APIHelper


class CustomersControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(CustomersControllerTests, cls).setUpClass()
        cls.controller = cls.client.customers
        cls.response_catcher = cls.controller.http_call_back

    # This product supports use cases such as payment enablement, account opening, and identity verification. Responses return information about the authorized end-user, the customer associated with the `id_token` used in the call. This information may include, but is not limited to, the customer identifier, name, email, address, and phone number.
    #
    #<br>
    #
    #To see the response schema, select the `200` response below. For an example payload response, see the `200` example response below the *Try it* feature. 
    #
    #This product requires consumer consent to share all account holder information.
    #
    #> ðŸ›‘ The `id_token` should be used as the bearer token with this call.
    #>
    def test_customer_info(self):
        # Parameters for the API call
        version = 'v2'
        provider_id = 'mikomo'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.customer_info(version, provider_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # This product supports use cases such as payment enablement, account opening, identity verification,or lending & credit enhancement. Responses return information about the authorized consumer, the customer associated with the `id_token` used in the call, and the relationship specific to the provided `accountId`.
    #
    #> ðŸ“Œ Please note!
    #>
    #> This endpoint provides additional information which may not be required for your use case, making it inefficient compared to the [/customer info](https://docs.akoya.com/reference/customer-info) endpoint. Please refer to to the [Customers guide](https://docs.akoya.com/reference/customers) for more information about this endpoint.
    #
    #Get account holder information. Based on FDX 5.2.1.
    #
    #This product requires consumer consent to share all account holder information.
    #
    #> ðŸ›‘ The `id_token` should be used as the bearer token with this call.
    #> 
    #
    def test_get_account_holder(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_account_holder(account_id, version, provider_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"holders":[{"customerId":"string","name":{"first":"string","middl'
            'e":"string","last":"string","prefix":"string","suffix":"string","c'
            'ompany":"string"},"businessCustomer":{"name":"string","registeredA'
            'gents":[{"first":"string","middle":"string","last":"string","prefi'
            'x":"string","suffix":"string","company":"string"}],"registeredId":'
            '"string","industryCode":{"type":"string","code":"string"},"domicil'
            'e":{"region":"string","country":"string"}},"addresses":[{"line1":"'
            'string","line2":"string","line3":"string","city":"string","state":'
            '"string","region":"string","postalCode":"string","country":"string'
            '","type":"string"}],"telephones":[{"number":"string","type":"HOME"'
            ',"country":"string"}],"email":["string"],"accounts":[{"accountId":'
            '"string","relationship":"AUTHORIZED_USER"}],"relationship":"AUTHOR'
            'IZED_USER"}],"emails":["string"],"addresses":[{"line1":"string","l'
            'ine2":"string","line3":"string","city":"string","state":"string","'
            'region":"string","postalCode":"string","country":"US","type":"stri'
            'ng"}],"telephones":[{"type":"HOME","country":"US","number":"867530'
            '9"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

