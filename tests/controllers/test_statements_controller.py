# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from akoyaapisv240.api_helper import APIHelper


class StatementsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(StatementsControllerTests, cls).setUpClass()
        cls.controller = cls.client.statements
        cls.response_catcher = cls.controller.http_call_back

    # Retrieve a list of available statements for the end-user's consented accounts. You may request a date range of up to two years of historical statements (maximum date ranges vary by provider).
    #
    #The paginated response includes an array of statement information with the end-user's account id and statement details such as statement id, date, description, and status. The results also include links to GET the statement image.
    def test_get_statement_list(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        start_time = dateutil.parser.parse('2020-03-30').date()
        end_time = dateutil.parser.parse('2021-03-30').date()
        offset = '0'
        limit = 50
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statement_list(account_id, version, provider_id, start_time, end_time, offset, limit, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. 
    #
    #For the initial launch, only PDF statements are supported. PDFs are returned in the response.
    #
    #### cURL request
    #
    #We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:
    #
    #```curl
    #curl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header "authorization: Bearer {idtoken}" --output example.pdf
    #```
    def test_get_statements(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        statement_id = 'statementId'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statements(account_id, version, provider_id, statement_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['accept'] = None
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/pdf'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. 
    #
    #For the initial launch, only PDF statements are supported. PDFs are returned in the response.
    #
    #### cURL request
    #
    #We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:
    #
    #```curl
    #curl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header "authorization: Bearer {idtoken}" --output example.pdf
    #```
    def test_get_statements_1(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        statement_id = 'statementId'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statements(account_id, version, provider_id, statement_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['accept'] = None
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'image/gif'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. 
    #
    #For the initial launch, only PDF statements are supported. PDFs are returned in the response.
    #
    #### cURL request
    #
    #We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:
    #
    #```curl
    #curl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header "authorization: Bearer {idtoken}" --output example.pdf
    #```
    def test_get_statements_2(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        statement_id = 'statementId'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statements(account_id, version, provider_id, statement_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['accept'] = None
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'image/jpeg'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. 
    #
    #For the initial launch, only PDF statements are supported. PDFs are returned in the response.
    #
    #### cURL request
    #
    #We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:
    #
    #```curl
    #curl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header "authorization: Bearer {idtoken}" --output example.pdf
    #```
    def test_get_statements_3(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        statement_id = 'statementId'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statements(account_id, version, provider_id, statement_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['accept'] = None
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'image/tiff'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. 
    #
    #For the initial launch, only PDF statements are supported. PDFs are returned in the response.
    #
    #### cURL request
    #
    #We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:
    #
    #```curl
    #curl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header "authorization: Bearer {idtoken}" --output example.pdf
    #```
    def test_get_statements_4(self):
        # Parameters for the API call
        account_id = ':accountId'
        version = 'v2'
        provider_id = 'mikomo'
        statement_id = 'statementId'
        x_akoya_interaction_type = None

        # Perform the API call through the SDK function
        result = self.controller.get_statements(account_id, version, provider_id, statement_id, x_akoya_interaction_type)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['accept'] = None
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'image/png'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


