# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from akoyaapisv240.api_helper import APIHelper


class AccountInformationControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(AccountInformationControllerTests, cls).setUpClass()
        cls.controller = cls.client.account_information
        cls.response_catcher = cls.controller.http_call_back

    # Get basic account information including accountId, masked account number, type, description, etc.
    #
    #To view the response schema, select the `200` response below. Then pick an option for annuity, deposit, insurance, investment, loan, and line of credit account types. 
    #
    #For an example payload response, see the `200` example response below the `Try it` feature. The example is from a deposit account but all account types are supported by this endpoint.
    #
    #> ðŸ›‘
    #> 
    #> The *id_token* should be used as the bearer token with this call.
    #
    #Use the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:
    #
    #`https://sandbox-products.ddp.akoya.com/accounts-info/v2/mikomo?mode=standard`
    #
    #`mode` is available in both sandbox and production.
    #
    #`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.
    #
    #
    def test_get_accounts_info(self):
        # Parameters for the API call
        version = 'v2'
        provider_id = 'mikomo'
        x_akoya_interaction_type = None
        mode = 'raw'

        # Perform the API call through the SDK function
        result = self.controller.get_accounts_info(version, provider_id, x_akoya_interaction_type, mode)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"accounts":[{"investmentAccount":{"accountId":"839502593","accoun'
            'tType":"College Savings","balanceType":"ASSET","currency":{"curren'
            'cyCode":"USD"},"nickname":"529 for Kid"}},{"investmentAccount":{"a'
            'ccountId":"5426873","accountNumberDisplay":"...7054","accountType"'
            ':"BROKERAGE","allowedCheckWriting":false,"currency":{"currencyCode'
            '":"USD"},"lastActivityDate":"2021-07-06T00:00:00Z","margin":false,'
            '"nickname":"Self-Directed","status":"OPEN","transactionsIncluded":'
            'false}},{"depositAccount":{"accountId":"g833202fb0866d0ad83472c429'
            '","accountNumberDisplay":"xxxxxxxx0071","accountType":"CHECKING","'
            'balanceType":"ASSET","currency":{"currencyCode":"USD"},"descriptio'
            'n":"Checking Plus","fiAttributes":[{"name":"accountOpenedDate","va'
            'lue":"2020-04-23"},{"name":"interestPaidLastYear","value":"3.20"}]'
            ',"interestRate":0.0125,"interestRateAsOf":"2022-04-24T14:15:22Z","'
            'interestRateType":"FIXED","lastActivityDate":"2022-04-24T14:15:22Z'
            '","lineOfBusiness":"Personal","nickname":"Nickname Checking Plus 0'
            '071","productName":"Checking Plus","status":"OPEN","transferIn":tr'
            'ue,"transferOut":true}},{"depositAccount":{"accountId":"5dbda8de96'
            'eeff05f23934523a1fc258","accountNumberDisplay":"xxxx0134","account'
            'Type":"CHECKING","annualPercentageYield":0,"currency":{"currencyCo'
            'de":"USD"},"description":"Virtual Wallet Student Reserve","interes'
            'tRateAsOf":"2022-04-24T14:15:22Z","interestRateType":"FIXED","last'
            'ActivityDate":"2022-04-01T10:05:00Z","lineOfBusiness":"LBRB","prod'
            'uctName":"Virtual Wallet Student Reserve","transactionsIncluded":f'
            'alse}},{"depositAccount":{"accountId":"11719ae5-2399-1278-e43c-43f'
            '24abb3058","accountType":"CD","annualPercentageYield":0.75,"balanc'
            'eType":"ASSET","currency":{"currencyCode":"USD","originalCurrencyC'
            'ode":"USD"},"description":"Certificate of Deposit","fiAttributes":'
            '[{"name":"eStatements","value":"False"},{"name":"interestPaidLastY'
            'ear","value":"50.72"},{"name":"isTransactionsSupported","value":"F'
            'alse"},{"name":"issueDate","value":"2019-03-21T00:00:00.000Z"},{"n'
            'ame":"interestPayoutFrequency","value":"Semi-Annually (And At Matu'
            'rity)"}],"interestRate":0.75,"lineOfBusiness":"CONSUMER","maturity'
            'Date":"2024-03-21T00:00:00Z","nickname":"Certificate of Deposit - '
            '3691","parentAccountId":"11719ae5-2399-1278-e43c-43f24abb3058","st'
            'atus":"OPEN","term":60,"transactionsIncluded":false,"transferIn":f'
            'alse,"transferOut":false}},{"depositAccount":{"accountId":"33fbd9e'
            '5-9cc3-3d7d-15b3-70d97d87ca1d","accountType":"SAVINGS","balanceTyp'
            'e":"ASSET","currency":{"currencyCode":"USD","originalCurrencyCode"'
            ':"USD"},"description":"Savings","fiAttributes":[{"name":"eStatemen'
            'ts","value":"True"}],"interestRate":0.01,"lineOfBusiness":"CONSUME'
            'R","nickname":"Savings - 8537","parentAccountId":"33fbd9e5-9cc3-3d'
            '7d-15b3-70d97d87ca1d","status":"OPEN","transactionsIncluded":false'
            '}}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get basic account information including accountId, masked account number, type, description, etc.
    #
    #To view the response schema, select the `200` response below. Then pick an option for annuity, deposit, insurance, investment, loan, and line of credit account types. 
    #
    #For an example payload response, see the `200` example response below the `Try it` feature. The example is from a deposit account but all account types are supported by this endpoint.
    #
    #> ðŸ›‘
    #> 
    #> The *id_token* should be used as the bearer token with this call.
    #
    #Use the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:
    #
    #`https://sandbox-products.ddp.akoya.com/accounts-info/v2/mikomo?mode=standard`
    #
    #`mode` is available in both sandbox and production.
    #
    #`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.
    #
    #
    def test_get_accounts_info_1(self):
        # Parameters for the API call
        version = 'v2'
        provider_id = 'mikomo'
        x_akoya_interaction_type = None
        mode = 'raw'

        # Perform the API call through the SDK function
        result = self.controller.get_accounts_info(version, provider_id, x_akoya_interaction_type, mode)

        # Test response code
        assert self.response_catcher.response.status_code == 206

        # Test headers
        expected_headers = {}
        expected_headers['x-akoya-interaction-id'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"value":{"accounts":[{"investmentAccount":{"accountId":"839502593'
            '","accountType":"College Savings","balanceType":"ASSET","currency"'
            ':{"currencyCode":"USD"},"nickname":"529"}},{"investmentAccount":{"'
            'error":{"code":704,"message":"Account type not supported"}}}]}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

