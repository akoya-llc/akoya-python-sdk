# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from akoya.api_helper import APIHelper
from akoya.configuration import Server
from akoya.http.api_response import ApiResponse
from akoya.apis.base_api import BaseApi
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from akoya.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from akoya.models.paginated_array import PaginatedArray
from akoya.exceptions.error_error_exception import ErrorErrorException
from akoya.exceptions.api_exception import ApiException


class StatementsApi(BaseApi):

    """A Controller to access Endpoints in the akoya API."""
    def __init__(self, config):
        super(StatementsApi, self).__init__(config)

    def get_statement_list(self,
                           account_id,
                           version,
                           provider_id,
                           start_time=None,
                           end_time=None,
                           offset='0',
                           limit=50,
                           x_akoya_interaction_type=None):
        """Does a GET request to /statements/{version}/{providerId}/{accountId}.

        Retrieve a list of available statements for the end-user's consented
        accounts. You may request a date range of up to two years of
        historical statements (maximum date ranges vary by provider).
        The paginated response includes an array of statement information with
        the end-user's account id and statement details such as statement id,
        date, description, and status. The results also include links to GET
        the statement image.

        Args:
            account_id (str): Account Identifier
            version (str): Akoya major version number. Do not use minor
                version numbers. For instance, use v2 and not v2.2
            provider_id (str): Id of provider
            start_time (datetime, optional): Start date for use in retrieval
                of statements (ISO 8601)
            end_time (datetime, optional): End date for use in retrieval of
                statements (ISO 8601)
            offset (str, optional): The number of items to skip before the
                first in the response. The default is 0.
            limit (int, optional): The maximum number of items to be returned
                in the response. The default is 50.
            x_akoya_interaction_type (InteractionType, optional): Optional but
                recommended header to include with each data request.  Allowed
                values are `user` or `batch`.  `user` indicates a request is
                prompted by an end-user action. `batch` indicates the request
                is part of a batch process.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/statements/{version}/{providerId}/{accountId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('accountId')
                            .value(account_id)
                            .is_required(True)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .is_required(True)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('providerId')
                            .value(provider_id)
                            .is_required(True)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('startTime')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, start_time)))
            .query_param(Parameter()
                         .key('endTime')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, end_time)))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('x-akoya-interaction-type')
                          .value(x_akoya_interaction_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('acgAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaginatedArray.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Start or end date value is not in the ISO 8601 format.', ErrorErrorException)
            .local_error('404', '404 - Not found', ErrorErrorException)
            .local_error('405', 'Method Not Allowed', ApiException)
            .local_error('408', 'Request timed out (round trip call took >10 seconds).', ErrorErrorException)
            .local_error('500', 'Catch-all exception where request was not processed due to an internal outage/issue.', ErrorErrorException)
            .local_error('501', 'FdxVersion in header is not implemented.', ErrorErrorException)
            .local_error('503', 'System is down for maintenance.', ErrorErrorException)
        ).execute()

    def get_statements(self,
                       account_id,
                       version,
                       provider_id,
                       statement_id,
                       accept='application/pdf',
                       x_akoya_interaction_type=None):
        """Does a GET request to /statements/{version}/{providerId}/{accountId}/{statementId}.

        Retrieve a specific account statement file. Use [HTTP Accept
        request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
        ) to specify desired content types. 
        For the initial launch, only PDF statements are supported. PDFs are
        returned in the response.
        ### cURL request
        We recommend using the auto-generated cURL request with the {idToken},
        accountId, providerId, statementId, and version with an added cURL
        parameter to return the output to a file. For example:
        ```curl
        curl --request GET --url
        https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/51381578146
        5/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --header
        "authorization: Bearer {idtoken}" --output example.pdf
        ```

        Args:
            account_id (str): Account Identifier
            version (str): Akoya major version number. Do not use minor
                version numbers. For instance, use v2 and not v2.2
            provider_id (str): Id of provider
            statement_id (str): Statement Identifier
            accept (Accept, optional): The request header parameter. Example:
                application/pdf
            x_akoya_interaction_type (InteractionType, optional): Optional but
                recommended header to include with each data request.  Allowed
                values are `user` or `batch`.  `user` indicates a request is
                prompted by an end-user action. `batch` indicates the request
                is part of a batch process.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK - An
                image of an account statement

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/statements/{version}/{providerId}/{accountId}/{statementId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('accountId')
                            .value(account_id)
                            .is_required(True)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .is_required(True)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('providerId')
                            .value(provider_id)
                            .is_required(True)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('statementId')
                            .value(statement_id)
                            .is_required(True)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .header_param(Parameter()
                          .key('x-akoya-interaction-type')
                          .value(x_akoya_interaction_type))
            .auth(Single('acgAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .is_api_response(True)
            .local_error('400', 'Statement is processing and is not yet available.', ErrorErrorException)
            .local_error('404', 'Account exists but contains no statements.', ErrorErrorException)
            .local_error('405', 'Method Not Allowed', ApiException)
            .local_error('406', 'Content Type not Supported', ErrorErrorException)
            .local_error('408', 'Request timed out (round trip call took >10 seconds).', ErrorErrorException)
            .local_error('500', 'Catch-all exception where request was not processed due to an internal outage/issue.', ErrorErrorException)
            .local_error('501', 'FdxVersion in header is not implemented.', ErrorErrorException)
            .local_error('503', 'System is down for maintenance.', ErrorErrorException)
        ).execute()
