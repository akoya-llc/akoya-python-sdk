# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.authentication.header_auth import HeaderAuth
from akoya.api_helper import APIHelper
from apimatic_core.utilities.auth_helper import AuthHelper
from akoya.configuration import Server
from akoya.models.oauth_token import OauthToken
from akoya.apis.oauth_authorization_api import\
    OauthAuthorizationApi


class Oauth2(HeaderAuth):

    @property
    def error_message(self):
        """Display error message on occurrence of authentication failure
        in AuthorizationCodeAuth

        """
        return "AuthorizationCodeAuth: OAuthToken is undefined or expired."

    def __init__(self, authorization_code_auth_credentials, config):

        self._oauth_client_id = authorization_code_auth_credentials.oauth_client_id \
            if authorization_code_auth_credentials is not None else None
        self._oauth_client_secret = authorization_code_auth_credentials.oauth_client_secret \
            if authorization_code_auth_credentials is not None else None
        self._oauth_redirect_uri = authorization_code_auth_credentials.oauth_redirect_uri \
            if authorization_code_auth_credentials is not None else None
        if authorization_code_auth_credentials is not None \
                and isinstance(authorization_code_auth_credentials.oauth_token, OauthToken):
            self._oauth_token = OauthToken.from_dictionary(
                APIHelper.to_dictionary(authorization_code_auth_credentials.oauth_token))
        else:
            self._oauth_token = authorization_code_auth_credentials.oauth_token \
                if authorization_code_auth_credentials is not None else None
        if authorization_code_auth_credentials is not None \
                and isinstance(authorization_code_auth_credentials.oauth_scopes, list):
            self._oauth_scopes = authorization_code_auth_credentials.oauth_scopes
        else:
            self._oauth_scopes = None
        self._oauth_clock_skew = authorization_code_auth_credentials.oauth_clock_skew \
            if authorization_code_auth_credentials is not None else None
        self._oauth_on_token_update = authorization_code_auth_credentials.oauth_on_token_update \
            if authorization_code_auth_credentials is not None else None
        self._default_scopes = {"openid", "profile", "offline_access"}

        self._config = config
        self._o_auth_api = OauthAuthorizationApi(config)
        super().__init__(auth_params={})

    def is_valid(self):
        _is_oauth_token_set = self._oauth_token is not None and isinstance(self._oauth_token, OauthToken)

        if not _is_oauth_token_set:
            return False

        if self.is_token_expired(self._oauth_token):
            self._oauth_token = self.refresh_token()
            self._apply_on_token_update_callback(self._oauth_token)

        return not self.is_token_expired()

    def get_authorization_url(self, connector, state, additional_query_params=None):
        """ Builds and returns an authorization URL. The user is expected to
            obtain an authorization code from this URL and then call the authorize
            function with that authorization code.

        Args:
            connector (str): The identifier for the data provider user will be logging in to.
            state (str): An opaque state string.
            additional_query_params (dict): Any additional query parameters to be added to the URL.

        Returns:
            str: The authorization URL.

        """
        query_params = {
            'response_type': 'code',
            'client_id': self._oauth_client_id,
            'redirect_uri': self._oauth_redirect_uri,
            'scope': ' '.join(self._default_scopes)
        }

        if connector is not None:
            query_params['connector'] = connector

        if state is not None:
            query_params['state'] = state

        if additional_query_params:
            query_params.update(additional_query_params)

        auth_url = self._config.get_base_uri(Server.AUTH_SERVER)
        auth_url += '/auth'
        auth_url = APIHelper.append_url_with_query_parameters(auth_url, query_params)

        return APIHelper.clean_url(auth_url)

    def build_basic_auth_header(self):
        """ Builds the basic auth header for endpoints in the
            OAuth Authorization Controller.

        Returns:
            str: The value of the Authentication header.

        """
        return "Basic {}".format(AuthHelper.get_base64_encoded_value(
            self._oauth_client_id, self._oauth_client_secret))

    def fetch_token(self, auth_code, additional_form_params=None):
        """ Authorizes the client.

            auth_code (str): The authentication code.
            additional_form_params (dict):  Any additional form parameters.

        Returns:
            OauthToken: The OAuth token.

        Raises:
            ApiException: When an error occurs while fetching the OAuth token.

        """
        token = self._o_auth_api.request_token(
            self.build_basic_auth_header(),
            auth_code,
            self._oauth_redirect_uri,
            _optional_form_parameters=additional_form_params
        ).body
        if hasattr(token, 'expires_in'):
            current_utc_timestamp = AuthHelper.get_current_utc_timestamp()
            token.expiry = AuthHelper.get_token_expiry(current_utc_timestamp, token.expires_in)
        return token

    def is_token_expired(self, oauth_token=None):
        """ Checks if OAuth token has expired.

        Args:
            oauth_token (OauthToken): The OAuth token whose expiry is to be checked.

        Returns:
            bool: True if OAuth token has expired, False otherwise.

        """
        if oauth_token is None:
            return (hasattr(self._oauth_token, 'expiry')
                    and AuthHelper.is_token_expired(self._oauth_token.expiry, self._oauth_clock_skew))

        return (hasattr(oauth_token, 'expiry')
                and AuthHelper.is_token_expired(oauth_token.expiry, self._oauth_clock_skew))

    def refresh_token(self, additional_params=None):
        """ Refreshes OAuth token.

        Args:
            additional_params (dict):  Any additional form parameters.

        Returns:
            OAuthToken: The refreshed OAuth token.

        Raises:
            ApiException: When an error occurs while refreshing the OAuth token.

        """
        token = self._o_auth_api.refresh_token(
            self._oauth_token.refresh_token,
            self._oauth_client_id,
            self._oauth_client_secret,
            _optional_form_parameters=additional_params
        ).body
        if hasattr(token, 'expires_in'):
            current_utc_timestamp = AuthHelper.get_current_utc_timestamp()
            token.expiry = AuthHelper.get_token_expiry(current_utc_timestamp, token.expires_in)
        return token

    def revoke_token(self, additional_form_params=None):
        """ Revokes the OAuth token.

        Args:
            additional_form_params (dict):  Any additional form parameters.

        """
        self._o_auth_api.revoke_token(
            self._oauth_token.refresh_token,
            self._oauth_client_id,
            self._oauth_client_secret,
            _optional_form_parameters=additional_form_params
        )

    def apply(self, http_request):
        auth_params = {"Authorization": "Bearer {}".format(self._oauth_token.id_token)}
        AuthHelper.apply(auth_params, http_request.add_header)

    def _apply_on_token_update_callback(self, oauth_token):
        """ This function applies the OAuth token update callback provided by the user.
        """
        if self._oauth_on_token_update is not None:
            self._oauth_on_token_update(oauth_token)


class AuthorizationCodeAuthCredentials:

    @property
    def oauth_client_id(self):
        return self._oauth_client_id

    @property
    def oauth_client_secret(self):
        return self._oauth_client_secret

    @property
    def oauth_redirect_uri(self):
        return self._oauth_redirect_uri

    @property
    def oauth_token(self):
        return self._oauth_token

    @property
    def oauth_scopes(self):
        return self._oauth_scopes

    @property
    def oauth_on_token_update(self):
        return self._oauth_on_token_update

    @property
    def oauth_clock_skew(self):
        return self._oauth_clock_skew

    def __init__(self, oauth_client_id, oauth_client_secret, oauth_redirect_uri,
                 oauth_token=None, oauth_scopes=None,
                 oauth_on_token_update=None, oauth_clock_skew=None):
        if oauth_client_id is None:
            raise ValueError('oauth_client_id cannot be None')
        if oauth_client_secret is None:
            raise ValueError('oauth_client_secret cannot be None')
        if oauth_redirect_uri is None:
            raise ValueError('oauth_redirect_uri cannot be None')
        self._oauth_client_id = oauth_client_id
        self._oauth_client_secret = oauth_client_secret
        self._oauth_redirect_uri = oauth_redirect_uri
        self._oauth_token = oauth_token
        self._oauth_scopes = oauth_scopes
        self._oauth_on_token_update = oauth_on_token_update
        self._oauth_clock_skew = oauth_clock_skew

    def clone_with(self, oauth_client_id=None, oauth_client_secret=None,
                   oauth_redirect_uri=None, oauth_token=None, oauth_scopes=None,
                   oauth_on_token_update=None, oauth_clock_skew=None):
        return AuthorizationCodeAuthCredentials(
            oauth_client_id or self.oauth_client_id,
            oauth_client_secret or self.oauth_client_secret,
            oauth_redirect_uri or self.oauth_redirect_uri,
            oauth_token or self.oauth_token, oauth_scopes or self.oauth_scopes,
            oauth_on_token_update or self.oauth_on_token_update,
            oauth_clock_skew or self.oauth_clock_skew)
