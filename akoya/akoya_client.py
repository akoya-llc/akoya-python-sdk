# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from akoya.configuration import Configuration
from akoya.apis.base_api import BaseApi
from akoya.configuration import Environment
from akoya.http.auth.oauth_2 import Oauth2
from akoya.apis.account_information_api import AccountInformationApi
from akoya.apis.balances_api import BalancesApi
from akoya.apis.customers_api import CustomersApi
from akoya.apis.investments_api import InvestmentsApi
from akoya.apis.payments_api import PaymentsApi
from akoya.apis.statements_api import StatementsApi
from akoya.apis.tax_beta_api import TaxBetaApi
from akoya.apis.transactions_api import TransactionsApi
from akoya.apis.oauth_authorization_api import OauthAuthorizationApi


class AkoyaClient(object):
    @LazyProperty
    def account_information(self):
        return AccountInformationApi(self.global_configuration)

    @LazyProperty
    def balances(self):
        return BalancesApi(self.global_configuration)

    @LazyProperty
    def customers(self):
        return CustomersApi(self.global_configuration)

    @LazyProperty
    def investments(self):
        return InvestmentsApi(self.global_configuration)

    @LazyProperty
    def payments(self):
        return PaymentsApi(self.global_configuration)

    @LazyProperty
    def statements(self):
        return StatementsApi(self.global_configuration)

    @LazyProperty
    def tax_beta(self):
        return TaxBetaApi(self.global_configuration)

    @LazyProperty
    def transactions(self):
        return TransactionsApi(self.global_configuration)

    @LazyProperty
    def oauth_authorization(self):
        return OauthAuthorizationApi(self.global_configuration)

    @property
    def acg_auth(self):
        return self.auth_managers['acgAuth']

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 logging_configuration=None, environment=Environment.SANDBOX,
                 authorization_code_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            logging_configuration=logging_configuration,
            environment=environment,
            authorization_code_auth_credentials=authorization_code_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseApi.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseApi.user_agent(), BaseApi.user_agent_parameters())

        self.auth_managers = {key: None for key in ['acgAuth']}
        self.auth_managers['acgAuth'] = Oauth2(
            self.config.authorization_code_auth_credentials,
            self.global_configuration)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

