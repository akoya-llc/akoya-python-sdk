# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoya.api_helper import APIHelper
from akoya.models.tax_statement import TaxStatement


class TaxStatementList(object):

    """Implementation of the 'Tax Statement List' model.

    Tax statement list containing one or more tax statements

    Attributes:
        statements (List[TaxStatement]): The list of tax statements
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statements": 'statements'
    }

    _optionals = [
        'statements',
    ]

    def __init__(self,
                 statements=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the TaxStatementList class"""

        # Initialize members of the class
        if statements is not APIHelper.SKIP:
            self.statements = statements 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        statements = None
        if dictionary.get('statements') is not None:
            statements = [TaxStatement.from_dictionary(x) for x in dictionary.get('statements')]
        else:
            statements = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(statements,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'statements={(self.statements if hasattr(self, "statements") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'statements={(self.statements if hasattr(self, "statements") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
