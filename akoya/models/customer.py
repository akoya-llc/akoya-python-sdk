# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoya.api_helper import APIHelper
from akoya.models.address_info import AddressInfo
from akoya.models.name import Name


class Customer(object):

    """Implementation of the 'Customer' model.

    Represents a customer (end-user)

    Attributes:
        customer_id (str): Long-term persistent identity of the end-user. This
            identity must be unique to the owning institution
        name (Name): The end-user's name
        addresses (List[AddressInfo]): An array of the end-user's physical
            mail addresses
        telephones (List[str]): Optional array of telephone numbers
        email (List[str]): An array of the end-user's electronic mail addresses
        accounts (List[str]): Optional list of accounts associated with the
            customer
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "name": 'name',
        "addresses": 'addresses',
        "telephones": 'telephones',
        "email": 'email',
        "accounts": 'accounts'
    }

    _optionals = [
        'customer_id',
        'name',
        'addresses',
        'telephones',
        'email',
        'accounts',
    ]

    _nullables = [
        'telephones',
        'accounts',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 addresses=APIHelper.SKIP,
                 telephones=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 accounts=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Customer class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if addresses is not APIHelper.SKIP:
            self.addresses = addresses 
        if telephones is not APIHelper.SKIP:
            self.telephones = telephones 
        if email is not APIHelper.SKIP:
            self.email = email 
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        name = Name.from_dictionary(dictionary.get('name')) if 'name' in dictionary.keys() else APIHelper.SKIP
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [AddressInfo.from_dictionary(x) for x in dictionary.get('addresses')]
        else:
            addresses = APIHelper.SKIP
        telephones = dictionary.get("telephones") if "telephones" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        accounts = dictionary.get("accounts") if "accounts" in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(customer_id,
                   name,
                   addresses,
                   telephones,
                   email,
                   accounts,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!r}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!s}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
