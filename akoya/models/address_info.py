# -*- coding: utf-8 -*-

"""
akoya

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoya.api_helper import APIHelper


class AddressInfo(object):

    """Implementation of the 'AddressInfo' model.

    Attributes:
        line_1 (str): May contain full address if not separated
        city (str): The model property of type str.
        state (str): The model property of type str.
        postal_code (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "line_1": 'line1',
        "city": 'city',
        "state": 'state',
        "postal_code": 'postalCode'
    }

    _optionals = [
        'line_1',
        'city',
        'state',
        'postal_code',
    ]

    def __init__(self,
                 line_1=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 postal_code=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AddressInfo class"""

        # Initialize members of the class
        if line_1 is not APIHelper.SKIP:
            self.line_1 = line_1 
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if postal_code is not APIHelper.SKIP:
            self.postal_code = postal_code 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        line_1 = dictionary.get("line1") if dictionary.get("line1") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        postal_code = dictionary.get("postalCode") if dictionary.get("postalCode") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(line_1,
                   city,
                   state,
                   postal_code,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'line_1={(self.line_1 if hasattr(self, "line_1") else None)!r}, '
                f'city={(self.city if hasattr(self, "city") else None)!r}, '
                f'state={(self.state if hasattr(self, "state") else None)!r}, '
                f'postal_code={(self.postal_code if hasattr(self, "postal_code") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'line_1={(self.line_1 if hasattr(self, "line_1") else None)!s}, '
                f'city={(self.city if hasattr(self, "city") else None)!s}, '
                f'state={(self.state if hasattr(self, "state") else None)!s}, '
                f'postal_code={(self.postal_code if hasattr(self, "postal_code") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
