# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.account_holder_entity import AccountHolderEntity
from akoyaapisv240.models.delivery_address import DeliveryAddress
from akoyaapisv240.models.telephone_number import TelephoneNumber


class AccountContactEntity(object):

    """Implementation of the 'Account Contact entity' model.

    Contact information for the account

    Attributes:
        holders (List[AccountHolderEntity]): Owners of the account
        emails (List[str]): Email addresses associated with the account
        addresses (List[DeliveryAddress]): The model property of type
            List[DeliveryAddress].
        telephones (List[TelephoneNumber]): Telephone numbers associated with
            the account.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "holders": 'holders',
        "emails": 'emails',
        "addresses": 'addresses',
        "telephones": 'telephones'
    }

    _optionals = [
        'holders',
        'emails',
        'addresses',
        'telephones',
    ]

    def __init__(self,
                 holders=APIHelper.SKIP,
                 emails=APIHelper.SKIP,
                 addresses=APIHelper.SKIP,
                 telephones=APIHelper.SKIP):
        """Constructor for the AccountContactEntity class"""

        # Initialize members of the class
        if holders is not APIHelper.SKIP:
            self.holders = holders 
        if emails is not APIHelper.SKIP:
            self.emails = emails 
        if addresses is not APIHelper.SKIP:
            self.addresses = addresses 
        if telephones is not APIHelper.SKIP:
            self.telephones = telephones 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        holders = None
        if dictionary.get('holders') is not None:
            holders = [AccountHolderEntity.from_dictionary(x) for x in dictionary.get('holders')]
        else:
            holders = APIHelper.SKIP
        emails = dictionary.get("emails") if dictionary.get("emails") else APIHelper.SKIP
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [DeliveryAddress.from_dictionary(x) for x in dictionary.get('addresses')]
        else:
            addresses = APIHelper.SKIP
        telephones = None
        if dictionary.get('telephones') is not None:
            telephones = [TelephoneNumber.from_dictionary(x) for x in dictionary.get('telephones')]
        else:
            telephones = APIHelper.SKIP
        # Return an object of this model
        return cls(holders,
                   emails,
                   addresses,
                   telephones)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'holders={(self.holders if hasattr(self, "holders") else None)!r}, '
                f'emails={(self.emails if hasattr(self, "emails") else None)!r}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!r}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'holders={(self.holders if hasattr(self, "holders") else None)!s}, '
                f'emails={(self.emails if hasattr(self, "emails") else None)!s}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!s}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!s})')
