# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class HateoasLink(object):

    """Implementation of the 'HATEOAS Link' model.

    REST application constraint (Hypermedia As The Engine Of Application State)

    Attributes:
        href (str): URL to invoke the action on the resource
        action (HttpMethod): HTTP Method to use for the request
        types (List[ContentType]): Content-types that can be used in the
            Accept header.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "href": 'href',
        "action": 'action',
        "types": 'types'
    }

    _optionals = [
        'action',
        'types',
    ]

    def __init__(self,
                 href=None,
                 action=APIHelper.SKIP,
                 types=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the HateoasLink class"""

        # Initialize members of the class
        self.href = href 
        if action is not APIHelper.SKIP:
            self.action = action 
        if types is not APIHelper.SKIP:
            self.types = types 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        href = dictionary.get("href") if dictionary.get("href") else None
        action = dictionary.get("action") if dictionary.get("action") else APIHelper.SKIP
        types = dictionary.get("types") if dictionary.get("types") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(href,
                   action,
                   types,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.href,
                                           type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('href'),
                                       type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'href={self.href!r}, '
                f'action={(self.action if hasattr(self, "action") else None)!r}, '
                f'types={(self.types if hasattr(self, "types") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'href={self.href!s}, '
                f'action={(self.action if hasattr(self, "action") else None)!s}, '
                f'types={(self.types if hasattr(self, "types") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
