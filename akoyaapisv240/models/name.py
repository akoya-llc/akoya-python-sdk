# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.account_relationship import AccountRelationship
from akoyaapisv240.models.address_info import AddressInfo
from akoyaapisv240.models.telephone import Telephone


class Name(object):

    """Implementation of the 'Name' model.

    The end-user's name

    Attributes:
        first (str): First or given name. This data element may contain first
            & last name if not separated.
        middle (str): The model property of type str.
        last (str): The model property of type str.
        prefix (str): Name prefix, e.g. Mr.
        suffix (str): Generational or academic suffix
        company (str): Company name
        addresses (List[AddressInfo]): An array of the end-user's physical
            mail addresses
        telephones (List[Telephone]): The model property of type
            List[Telephone].
        email (List[str]): An array of the end-user's electronic mail addresses
        accounts (List[AccountRelationship]): List of accounts related to this
            end-user
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first": 'first',
        "middle": 'middle',
        "last": 'last',
        "prefix": 'prefix',
        "suffix": 'suffix',
        "company": 'company',
        "addresses": 'addresses',
        "telephones": 'telephones',
        "email": 'email',
        "accounts": 'accounts'
    }

    _optionals = [
        'first',
        'middle',
        'last',
        'prefix',
        'suffix',
        'company',
        'addresses',
        'telephones',
        'email',
        'accounts',
    ]

    def __init__(self,
                 first=APIHelper.SKIP,
                 middle=APIHelper.SKIP,
                 last=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 suffix=APIHelper.SKIP,
                 company=APIHelper.SKIP,
                 addresses=APIHelper.SKIP,
                 telephones=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 accounts=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Name class"""

        # Initialize members of the class
        if first is not APIHelper.SKIP:
            self.first = first 
        if middle is not APIHelper.SKIP:
            self.middle = middle 
        if last is not APIHelper.SKIP:
            self.last = last 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        if suffix is not APIHelper.SKIP:
            self.suffix = suffix 
        if company is not APIHelper.SKIP:
            self.company = company 
        if addresses is not APIHelper.SKIP:
            self.addresses = addresses 
        if telephones is not APIHelper.SKIP:
            self.telephones = telephones 
        if email is not APIHelper.SKIP:
            self.email = email 
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        first = dictionary.get("first") if dictionary.get("first") else APIHelper.SKIP
        middle = dictionary.get("middle") if dictionary.get("middle") else APIHelper.SKIP
        last = dictionary.get("last") if dictionary.get("last") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else APIHelper.SKIP
        suffix = dictionary.get("suffix") if dictionary.get("suffix") else APIHelper.SKIP
        company = dictionary.get("company") if dictionary.get("company") else APIHelper.SKIP
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [AddressInfo.from_dictionary(x) for x in dictionary.get('addresses')]
        else:
            addresses = APIHelper.SKIP
        telephones = None
        if dictionary.get('telephones') is not None:
            telephones = [Telephone.from_dictionary(x) for x in dictionary.get('telephones')]
        else:
            telephones = APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        accounts = None
        if dictionary.get('accounts') is not None:
            accounts = [AccountRelationship.from_dictionary(x) for x in dictionary.get('accounts')]
        else:
            accounts = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(first,
                   middle,
                   last,
                   prefix,
                   suffix,
                   company,
                   addresses,
                   telephones,
                   email,
                   accounts,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'first={(self.first if hasattr(self, "first") else None)!r}, '
                f'middle={(self.middle if hasattr(self, "middle") else None)!r}, '
                f'last={(self.last if hasattr(self, "last") else None)!r}, '
                f'prefix={(self.prefix if hasattr(self, "prefix") else None)!r}, '
                f'suffix={(self.suffix if hasattr(self, "suffix") else None)!r}, '
                f'company={(self.company if hasattr(self, "company") else None)!r}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!r}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'first={(self.first if hasattr(self, "first") else None)!s}, '
                f'middle={(self.middle if hasattr(self, "middle") else None)!s}, '
                f'last={(self.last if hasattr(self, "last") else None)!s}, '
                f'prefix={(self.prefix if hasattr(self, "prefix") else None)!s}, '
                f'suffix={(self.suffix if hasattr(self, "suffix") else None)!s}, '
                f'company={(self.company if hasattr(self, "company") else None)!s}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!s}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
