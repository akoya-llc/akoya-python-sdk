# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.name import Name


class AccountHolderEntity(object):

    """Implementation of the 'Account Holder entity' model.

    Extends `Customer` and adds a `relationship` field to define the
    customer's relationship with an account

    Attributes:
        customer_id (str): Long-term persistent identity of the end-user. This
            identity must be unique to the owning institution
        name (Name): The end-user's name
        relationship (AccountHolderEntityRelationshipEnum): Customer's
            relationship to the account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "name": 'name',
        "relationship": 'relationship'
    }

    _optionals = [
        'customer_id',
        'name',
        'relationship',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 relationship=APIHelper.SKIP):
        """Constructor for the AccountHolderEntity class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if relationship is not APIHelper.SKIP:
            self.relationship = relationship 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        name = Name.from_dictionary(dictionary.get('name')) if 'name' in dictionary.keys() else APIHelper.SKIP
        relationship = dictionary.get("relationship") if dictionary.get("relationship") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   name,
                   relationship)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'relationship={(self.relationship if hasattr(self, "relationship") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'relationship={(self.relationship if hasattr(self, "relationship") else None)!s})')
