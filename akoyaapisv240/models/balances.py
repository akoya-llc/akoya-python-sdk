# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class Balances(object):

    """Implementation of the 'Balances' model.

    Attributes:
        accounts (List[DepositBalance | LoanBalance | LocBalance |
            InvestmentBalance | InsuranceBalance | AnnuityBalance] | None): An
            array of accounts with entity types dependent on the account type
            (deposit, investment, loan, line of credit, annuity or insurance)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accounts": 'accounts'
    }

    _optionals = [
        'accounts',
    ]

    def __init__(self,
                 accounts=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Balances class"""

        # Initialize members of the class
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from akoyaapisv240.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accounts = APIHelper.deserialize_union_type(UnionTypeLookUp.get('BalancesAccounts'), dictionary.get('accounts'), False) if dictionary.get('accounts') is not None else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(accounts,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
