# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.links import Links


class TransactionsEntity(object):

    """Implementation of the 'Transactions Entity' model.

    Optionally paginated array of transactions

    Attributes:
        links (Links): The model property of type Links.
        transactions (List[DepositTransactionInfo | LoanTransactionInfo |
            LocTransactionInfo | InvestmentTransactionInfo |
            InsuranceTransactionInfo] | None): An array of transactions with
            entity types dependent on the account type (deposit, investment,
            loan, or line of credit)
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "links": 'links',
        "transactions": 'transactions'
    }

    _optionals = [
        'links',
        'transactions',
    ]

    def __init__(self,
                 links=APIHelper.SKIP,
                 transactions=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the TransactionsEntity class"""

        # Initialize members of the class
        if links is not APIHelper.SKIP:
            self.links = links 
        if transactions is not APIHelper.SKIP:
            self.transactions = transactions 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from akoyaapisv240.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        links = Links.from_dictionary(dictionary.get('links')) if 'links' in dictionary.keys() else APIHelper.SKIP
        transactions = APIHelper.deserialize_union_type(UnionTypeLookUp.get('TransactionsEntityTransactions'), dictionary.get('transactions'), False) if dictionary.get('transactions') is not None else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(links,
                   transactions,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'transactions={(self.transactions if hasattr(self, "transactions") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'transactions={(self.transactions if hasattr(self, "transactions") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
